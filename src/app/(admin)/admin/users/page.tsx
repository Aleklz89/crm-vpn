'use client';

import React, { useState, useEffect, useMemo } from 'react';
import styles from './Users.module.css';
import Table from '@/components/Table/Table';
import { Column, CellProps } from 'react-table';

interface UserData {
    nickname: string;
    referrals: number;
    subscription: string;
    requests: number;
    renewed: boolean;
}

export default function Page() {
    const [data, setData] = useState<UserData[]>([]);
    const [sortColumn, setSortColumn] = useState<string | null>(null);
    const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');
    const [showSortMenu, setShowSortMenu] = useState<boolean>(false);
    const [showSettings, setShowSettings] = useState(true);
    const [showTablebox, setShowTablebox] = useState(true);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    useEffect(() => {
        const fetchUsers = async () => {
            try {
                const response = await fetch('/api/get-users');
                if (!response.ok) {
                    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
                }
                const userData: UserData[] = await response.json();
                setData(userData);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', error);
            }
        };

        fetchUsers();
    }, []);

    const columnsData: Column<UserData>[] = useMemo(() => [
        {
            Header: '–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            accessor: 'nickname',
            id: 'nickname',
        },
        {
            Header: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
            accessor: 'referrals',
            id: 'referrals',
        },
        {
            Header: '–ü–æ–¥–ø–∏—Å–∫–∞',
            accessor: 'subscription',
            id: 'subscription',
        },
        {
            Header: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤',
            accessor: 'requests',
            id: 'requests',
        },
        {
            Header: '–û–±–Ω–æ–≤–ª–µ–Ω–æ',
            accessor: 'renewed',
            id: 'renewed',
            Cell: ({ value }: CellProps<UserData, boolean>) => (
                <span>{value ? '–î–∞' : '–ù–µ—Ç'}</span>
            ),
        },
    ], []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    const sortedData = useMemo(() => {
        if (!sortColumn) return data;

        return [...data].sort((a, b) => {
            const aValue = a[sortColumn as keyof UserData];
            const bValue = b[sortColumn as keyof UserData];

            if (aValue < bValue) {
                return sortDirection === 'asc' ? -1 : 1;
            }
            if (aValue > bValue) {
                return sortDirection === 'asc' ? 1 : -1;
            }
            return 0;
        });
    }, [data, sortColumn, sortDirection]);

    const handleSortColumn = (columnId: string) => {
        if (sortColumn === columnId) {
            setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
        } else {
            setSortColumn(columnId);
            setSortDirection('asc');
        }
        setShowSortMenu(false);
    };

    return (
        <div className={styles.main}>
            <button className={styles.toggleButton} onClick={() => setShowSettings(!showSettings)}>
                {showSettings ? '–°–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
                <svg
                    className={`${styles.arrowIcon} ${showSettings ? styles.up : styles.down}`}
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                >
                    <path d="M12 15l-7-7h14l-7 7z" />
                </svg>
            </button>

            <button className={styles.toggleButton} onClick={() => setShowTablebox(!showTablebox)}>
                {showTablebox ? '–°–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É' : '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É'}
                <svg
                    className={`${styles.arrowIcon} ${showTablebox ? styles.up : styles.down}`}
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                >
                    <path d="M12 15l-7-7h14l-7 7z" />
                </svg>
            </button>

            <div className={styles.tablebox}>
                <div className={styles.tableWrapper}>
                    <div className={styles.header}>
                        <h3>–ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π <span>({data.length})</span></h3>
                        <div className={styles.sortButtonContainer}>
                            <button className={styles.sortButton} onClick={() => setShowSortMenu(!showSortMenu)}>
                                –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
                            </button>
                            {showSortMenu && (
                                <div className={styles.sortMenu}>
                                    {columnsData.map((column) => (
                                        <button
                                            key={column.id}
                                            className={styles.sortMenuItem}
                                            onClick={() => handleSortColumn(column.id ?? String(column.accessor))}
                                        >
                                            {typeof column.Header === 'string' ? column.Header : '–ö–æ–ª–æ–Ω–∫–∞'}
                                            {sortColumn === column.id && (
                                                <span className={styles.sortDirection}>
                                                    {sortDirection === 'asc' ? ' üîº' : ' üîΩ'}
                                                </span>
                                            )}
                                        </button>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                    <Table columns={columnsData} data={sortedData} />
                </div>
            </div>
        </div>
    );
}
