import { Bot, InlineKeyboard, webhookCallback, Context } from 'grammy';
import { PrismaClient, ArbitrationStatus } from '@prisma/client';

const userBot = new Bot(process.env.TELEGRAM_USER_BOT_TOKEN!);
const supportBot = new Bot(process.env.TELEGRAM_SUPPORT_BOT_TOKEN!);
const adminBot = new Bot(process.env.TELEGRAM_ADMIN_BOT_TOKEN!);

const prisma = new PrismaClient();

const moderatorState: { [moderatorId: number]: { state: string, targetId?: string } } = {};

const translations = {
  en: {
    welcome: "üëã Welcome, now you have moderator privileges.",
    invalid_link: "The link is invalid or has already been used.",
    moderator_bot: "üëã This is a bot for moderators!",
    command_error: "Error: Could not process the command. Please try again.",
    user_id_prompt: "Enter the user ID",
    assistant_id_prompt: "Enter the assistant ID",
    id_invalid: "The ID must be 9 digits. Please try again.",
    message_prompt: "Write your message.",
    message_sent: "Message sent successfully.",
    message_send_error: "Error sending the message. Please check the ID.",
    arbitration_list: "List of current arbitrations.",
    unknown_command: "I don't understand you.",
    message_user: "Message to user",
    message_assistant: "Message to assistant",
    menu: "Main Menu",
  },
  ru: {
    welcome: "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.",
    invalid_link: "–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞.",
    moderator_bot: "üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!",
    command_error: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    user_id_prompt: "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    assistant_id_prompt: "–í–≤–µ–¥–∏—Ç–µ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
    id_invalid: "ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 9 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    message_prompt: "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    message_sent: "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
    message_send_error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.",
    arbitration_list: "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π.",
    unknown_command: "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.",
    message_user: "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
    message_assistant: "–°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É",
    menu: "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
  },
};

function getTranslation(lang: 'ru' | 'en', key: keyof typeof translations['en']): string {
  return translations[lang][key] || translations['en'][key];
}

function detectUserLanguage(ctx: Context): 'ru' | 'en' {
  const langCode = ctx.from?.language_code;
  return langCode === 'ru' ? 'ru' : 'en';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lastActiveAt –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –±–æ—Ç–æ–º
adminBot.use(async (ctx, next) => {
  if (ctx.from?.id) {
    await prisma.moderator.update({
      where: { id: BigInt(ctx.from.id) },
      data: { lastActiveAt: new Date() },
    });
  }
  await next();
});

adminBot.command('menu', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  if (ctx.from?.id) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    const moderator = await prisma.moderator.findFirst({
      where: { id: BigInt(ctx.from.id) },
    });

    if (moderator) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      await showModeratorMenu(ctx, lang);
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await ctx.reply(getTranslation(lang, 'command_error'));
    }
  } else {
    await ctx.reply(getTranslation(lang, 'command_error'));
  }
});

adminBot.command('start', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  if (ctx.from?.id) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω
    if (ctx.message?.text) {
      const args = ctx.message.text.split(' ');
      if (args.length > 1) {
        const inviteToken = args[1].replace('invite_', '');

        // –ò—â–µ–º —Ç–æ–∫–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ Invitation
        const invitation = await prisma.invitation.findFirst({
          where: {
            token: inviteToken,
            used: false,
            role: 'moderator',
          },
        });

        if (invitation) {
          if (!invitation.login) {
            await ctx.reply('–õ–æ–≥–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏.');
            return;
          }

          // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Invitation –≤ —Ç–∞–±–ª–∏—Ü—É Moderator
          await prisma.moderator.create({
            data: {
              login: invitation.login,
              password: invitation.password || 'defaultPassword',
              id: BigInt(ctx.from.id),
            },
          });

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
          await prisma.invitation.update({
            where: { id: invitation.id },
            data: { used: true },
          });

          // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
          await ctx.reply(getTranslation(lang, 'welcome'));
          await showModeratorMenu(ctx, lang);
        } else {
          await ctx.reply(getTranslation(lang, 'invalid_link'));
        }
      } else {
        await ctx.reply(getTranslation(lang, 'moderator_bot'));
      }
    } else {
      await ctx.reply(getTranslation(lang, 'command_error'));
    }
  } else {
    await ctx.reply(getTranslation(lang, 'command_error'));
  }
});

async function showModeratorMenu(ctx: Context, lang: 'ru' | 'en') {
  const keyboard = new InlineKeyboard()
    .text('üí¨ ' + getTranslation(lang, 'message_user'), 'message_user')
    .row()
    .text('üë®‚Äçüíª ' + getTranslation(lang, 'message_assistant'), 'message_assistant')
    .row()
    .text('‚öñÔ∏è ' + getTranslation(lang, 'arbitration_list'), 'current_arbitrations');

  await ctx.reply(getTranslation(lang, 'menu'), { reply_markup: keyboard });
}

async function sendMessageToUser(chatId: string, text: string) {
  const botToken = process.env.TELEGRAM_USER_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_USER_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
  }
}

async function sendMessageToAssistant(chatId: string, text: string) {
  const botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_SUPPORT_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É:', error);
  }
}

adminBot.callbackQuery('message_user', async (ctx) => {
  const lang = detectUserLanguage(ctx);
  await ctx.answerCallbackQuery();
  moderatorState[ctx.from.id] = { state: 'awaiting_user_id' };
  await ctx.reply(getTranslation(lang, 'user_id_prompt'));
});

adminBot.callbackQuery('message_assistant', async (ctx) => {
  const lang = detectUserLanguage(ctx);
  await ctx.answerCallbackQuery();
  moderatorState[ctx.from.id] = { state: 'awaiting_assistant_id' };
  await ctx.reply(getTranslation(lang, 'assistant_id_prompt'));
});

adminBot.callbackQuery('current_arbitrations', async (ctx) => {
  await ctx.answerCallbackQuery();

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'PENDING'
  const arbitrations = await prisma.arbitration.findMany({
    where: {
      status: 'PENDING' as ArbitrationStatus,
    },
    include: {
      user: true,
      assistant: true,
    },
  });

  if (arbitrations.length === 0) {
    await ctx.reply('–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π.');
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
  for (const arbitration of arbitrations) {
    const message = `–ê—Ä–±–∏—Ç—Ä–∞–∂ ID: ${arbitration.id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${arbitration.user.telegramId}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${arbitration.assistant.telegramId}\n–ü—Ä–∏—á–∏–Ω–∞: ${arbitration.reason}`;
    const keyboard = new InlineKeyboard().text('–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å', `review_${arbitration.id.toString()}`);

    await ctx.reply(message, { reply_markup: keyboard });
  }
});

adminBot.command('end_arbitration', async (ctx) => {
  const moderatorTelegramId = BigInt(ctx.from?.id || 0);

  if (!moderatorTelegramId) {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
    return;
  }

  try {
    // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂, –≤ –∫–æ—Ç–æ—Ä–æ–º —É—á–∞—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    const arbitration = await prisma.arbitration.findFirst({
      where: {
        moderatorId: moderatorTelegramId,
        status: 'IN_PROGRESS' as ArbitrationStatus,
      },
      include: {
        user: true,
        assistant: true,
      },
    });

    if (!arbitration) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const keyboard = new InlineKeyboard()
      .text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', `arbitration_decision_user_${arbitration.id}`)
      .row()
      .text('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç', `arbitration_decision_assistant_${arbitration.id}`);

    await ctx.reply('–ö—Ç–æ –ø—Ä–∞–≤?', { reply_markup: keyboard });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.');
  }
});


adminBot.on('callback_query:data', async (ctx) => {
  const data = ctx.callbackQuery.data;

  if (data) {
    if (data.startsWith('review_')) {
      await ctx.answerCallbackQuery(); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–±—ç–∫–∞

      const arbitrationId = BigInt(data.split('_')[1]);
      const moderatorTelegramId = BigInt(ctx.from?.id || 0);

      if (!moderatorTelegramId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
        return;
      }

      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'IN_PROGRESS'
        const arbitration = await prisma.arbitration.update({
          where: { id: arbitrationId },
          data: {
            moderatorId: moderatorTelegramId,
            status: 'IN_PROGRESS' as ArbitrationStatus,
          },
          include: {
            user: true,
            assistant: true,
          },
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        await ctx.reply('–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é. –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏.');

        await sendMessageToUser(
          arbitration.user.telegramId.toString(),
          '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é. –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É.'
        );

        await sendMessageToAssistant(
          arbitration.assistant.telegramId.toString(),
          '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é. –û–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É.'
        );

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.');
      }
    } else if (data.startsWith('arbitration_decision_')) {
      await ctx.answerCallbackQuery();

      const parts = data.split('_');
      const decision = parts[2]; // 'user' –∏–ª–∏ 'assistant'
      const arbitrationId = BigInt(parts[3]);
      const moderatorTelegramId = BigInt(ctx.from?.id || 0);

      if (!moderatorTelegramId) {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
        return;
      }

      try {
        // –ù–∞—Ö–æ–¥–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂
        const arbitration = await prisma.arbitration.findFirst({
          where: {
            id: arbitrationId,
            moderatorId: moderatorTelegramId,
            status: 'IN_PROGRESS' as ArbitrationStatus,
          },
          include: {
            user: true,
            assistant: true,
          },
        });

        if (!arbitration) {
          await ctx.reply('–ê—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.');
          return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∏ —Ä–µ—à–µ–Ω–∏–µ
        let newStatus: ArbitrationStatus;
        let decisionText = '';

        if (decision === 'user') {
          newStatus = 'REJECTED' as ArbitrationStatus; // –†–µ—à–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          decisionText = 'USER';
        } else if (decision === 'assistant') {
          newStatus = 'ACCEPTED' as ArbitrationStatus; // –†–µ—à–µ–Ω–∏–µ –≤ –ø–æ–ª—å–∑—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          decisionText = 'ASSISTANT';
        } else {
          await ctx.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.');
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂
        await prisma.arbitration.update({
          where: { id: arbitration.id },
          data: {
            status: newStatus,
            decision: decisionText,
          },
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await prisma.assistant.update({
          where: { telegramId: arbitration.assistant.telegramId },
          data: { isBusy: false },
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await ctx.reply('–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à—ë–Ω.');

        // –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let userMessage = '';
        let assistantMessage = '';

        if (decision === 'user') {
          userMessage = '–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à—ë–Ω –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.';
          assistantMessage = '–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à—ë–Ω –≤ –ø–æ–ª—å–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.';
        } else {
          userMessage = '–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à—ë–Ω –≤ –ø–æ–ª—å–∑—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.';
          assistantMessage = '–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–≤–µ—Ä—à—ë–Ω –≤ –≤–∞—à—É –ø–æ–ª—å–∑—É.';
        }

        await sendMessageToUser(arbitration.user.telegramId.toString(), userMessage);

        await sendMessageToAssistant(arbitration.assistant.telegramId.toString(), assistantMessage);

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.');
      }
    } else if (data === 'current_arbitrations') {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π"
      const lang = detectUserLanguage(ctx);
      await ctx.answerCallbackQuery();

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'PENDING'
      const arbitrations = await prisma.arbitration.findMany({
        where: {
          status: 'PENDING' as ArbitrationStatus,
        },
        include: {
          user: true,
          assistant: true,
        },
      });

      if (arbitrations.length === 0) {
        await ctx.reply('–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π.');
        return;
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
      for (const arbitration of arbitrations) {
        const message = `–ê—Ä–±–∏—Ç—Ä–∞–∂ ID: ${arbitration.id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${arbitration.user.telegramId}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${arbitration.assistant.telegramId}\n–ü—Ä–∏—á–∏–Ω–∞: ${arbitration.reason}`;
        const keyboard = new InlineKeyboard().text('–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å', `review_${arbitration.id.toString()}`);

        await ctx.reply(message, { reply_markup: keyboard });
      }
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö callback_data
      await ctx.answerCallbackQuery();
      await ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.');
    }
  }
});


adminBot.on('message', async (ctx) => {
  const moderatorTelegramId = BigInt(ctx.from?.id || 0);

  if (!moderatorTelegramId) {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
    return;
  }

  const messageText = ctx.message?.text;
  if (!messageText) {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
  const arbitration = await prisma.arbitration.findFirst({
    where: {
      moderatorId: moderatorTelegramId,
      status: 'IN_PROGRESS' as ArbitrationStatus,
    },
    include: {
      user: true,
      assistant: true,
    },
  });

  if (!arbitration) {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π.');
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:"
  const messageToSend = `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:\n${messageText}`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  await sendMessageToUser(
    arbitration.user.telegramId.toString(),
    messageToSend
  );

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
  await sendMessageToAssistant(
    arbitration.assistant.telegramId.toString(),
    messageToSend
  );
});

adminBot.on('message:text', async (ctx) => {
  const lang = detectUserLanguage(ctx);
  const modId = ctx.from?.id;
  if (!modId) {
    await ctx.reply(getTranslation(lang, 'command_error'));
    return;
  }

  const currentState = moderatorState[modId]?.state;

  if (!currentState) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤—ã—à–µ
    return;
  }

  if (currentState === 'awaiting_user_id' || currentState === 'awaiting_assistant_id') {
    const id = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ü–∏—Ñ—Ä –∏ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É –æ—Ç 9 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
    if (!/^\d{9,10}$/.test(id)) {
      await ctx.reply(getTranslation(lang, 'id_invalid'));
      return;
    }

    moderatorState[modId].targetId = id;

    if (currentState === 'awaiting_user_id') {
      moderatorState[modId].state = 'awaiting_message_user';
    } else {
      moderatorState[modId].state = 'awaiting_message_assistant';
    }

    await ctx.reply(getTranslation(lang, 'message_prompt'));
  } else if (currentState === 'awaiting_message_user' || currentState === 'awaiting_message_assistant') {
    const targetId = moderatorState[modId]?.targetId;

    if (targetId) {
      const targetMessage = `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n${ctx.message.text}`;
      try {
        if (currentState === 'awaiting_message_user') {
          await userBot.api.sendMessage(Number(targetId), targetMessage);
        } else if (currentState === 'awaiting_message_assistant') {
          await supportBot.api.sendMessage(Number(targetId), targetMessage);
        }
        await ctx.reply(getTranslation(lang, 'message_sent'));
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await ctx.reply(getTranslation(lang, 'message_send_error'));
      }
    }
    delete moderatorState[modId];
  } else {
    await ctx.reply(getTranslation(lang, 'unknown_command'));
  }
});

export const POST = webhookCallback(adminBot, 'std/http');
