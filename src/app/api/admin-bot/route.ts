import { Bot, InlineKeyboard, webhookCallback, Context } from 'grammy'; 
import { PrismaClient } from '@prisma/client';

// –ë–æ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
const userBot = new Bot(process.env.TELEGRAM_USER_BOT_TOKEN!);
const supportBot = new Bot(process.env.TELEGRAM_SUPPORT_BOT_TOKEN!);
const adminBot = new Bot(process.env.TELEGRAM_ADMIN_BOT_TOKEN!);

const prisma = new PrismaClient();

const moderatorState: { [moderatorId: number]: { state: string, targetId?: string } } = {};

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º Telegram ID
adminBot.command('start', async (ctx) => {
  if (ctx.from?.id) {
    const moderator = await prisma.moderator.findFirst({
      where: { telegramId: BigInt(ctx.from.id) },
    });

    if (moderator) {
      await showModeratorMenu(ctx);
    } else if (ctx.message?.text) {
      const args = ctx.message.text.split(' ');
      if (args.length > 1) {
        const inviteToken = args[1].replace('invite_', '');

        const inviteModerator = await prisma.moderator.findFirst({
          where: {
            inviteToken,
            telegramId: null,
          },
        });

        if (inviteModerator) {
          await prisma.moderator.update({
            where: { id: inviteModerator.id },
            data: { telegramId: BigInt(ctx.from.id) },
          });

          await ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.username}! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.`);
          await showModeratorMenu(ctx);
        } else {
          await ctx.reply('–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞.');
        }
      } else {
        await ctx.reply('üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!');
      }
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  } else {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async function showModeratorMenu(ctx: Context) {
  const keyboard = new InlineKeyboard()
    .text('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', 'message_user')
    .row()
    .text('üë®‚Äçüíª –°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É', 'message_assistant')
    .row()
    .text('‚öñÔ∏è –¢–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∏', 'current_arbitrations');

  await ctx.reply('üìã –ú–µ–Ω—é:', { reply_markup: keyboard });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
adminBot.callbackQuery('message_user', async (ctx) => {
  await ctx.answerCallbackQuery();
  moderatorState[ctx.from.id] = { state: 'awaiting_user_id' };
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (9 —Ü–∏—Ñ—Ä).');
});

adminBot.callbackQuery('message_assistant', async (ctx) => {
  await ctx.answerCallbackQuery();
  moderatorState[ctx.from.id] = { state: 'awaiting_assistant_id' };
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (9 —Ü–∏—Ñ—Ä).');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
adminBot.on('message:text', async (ctx) => {
  const modId = ctx.from?.id;
  if (!modId) {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    return;
  }

  const currentState = moderatorState[modId]?.state;

  if (!currentState) {
    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
    await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  if (currentState === 'awaiting_user_id' || currentState === 'awaiting_assistant_id') {
    const id = ctx.message.text;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 9 —Ü–∏—Ñ—Ä –∏ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
    if (!/^\d{9}$/.test(id)) { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ ID —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 9 —Ü–∏—Ñ—Ä
      await ctx.reply('ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 9 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    moderatorState[modId].targetId = id;

    // –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª–∏–º, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –º—ã –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (currentState === 'awaiting_user_id') {
      moderatorState[modId].state = 'awaiting_message_user';
    } else {
      moderatorState[modId].state = 'awaiting_message_assistant';
    }

    await ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  } else if (currentState === 'awaiting_message_user' || currentState === 'awaiting_message_assistant') {
    const targetId = moderatorState[modId]?.targetId;

    if (targetId) {
      const targetMessage = `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: ${ctx.message.text}`;
      try {
        if (currentState === 'awaiting_message_user') {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ userBot
          await userBot.api.sendMessage(Number(targetId), targetMessage);
        } else if (currentState === 'awaiting_message_assistant') {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —á–µ—Ä–µ–∑ supportBot
          await supportBot.api.sendMessage(Number(targetId), targetMessage);
        }
        await ctx.reply('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.');
      }
    }
    delete moderatorState[modId]; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
  } else {
    await ctx.reply('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.');
  }
});

adminBot.callbackQuery('current_arbitrations', async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply('–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π.');
});

// Webhook –¥–ª—è Next.js
export const POST = webhookCallback(adminBot, 'std/http');
