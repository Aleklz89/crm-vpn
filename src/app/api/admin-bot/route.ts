import { Bot, InlineKeyboard, webhookCallback, Context } from 'grammy'; 
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const token = process.env.TELEGRAM_ADMIN_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_BOT_TOKEN not found.');

const bot = new Bot(token);

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–æ–∫–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º Telegram ID
bot.command('start', async (ctx) => {
  if (ctx.from?.id) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ctx.from –∏ ctx.from.id —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    const moderator = await prisma.moderator.findFirst({
      where: { telegramId: BigInt(ctx.from.id) },
    });

    if (moderator) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
      await showModeratorMenu(ctx);
    } else if (ctx.message?.text) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–∫–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ
      const args = ctx.message.text.split(' ');
      if (args.length > 1) {
        const inviteToken = args[1].replace('invite_', '');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const inviteModerator = await prisma.moderator.findFirst({
          where: {
            inviteToken,
            telegramId: null,
          },
        });

        if (inviteModerator) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –¥–æ–±–∞–≤–ª—è—è telegramId
          await prisma.moderator.update({
            where: { id: inviteModerator.id },
            data: { telegramId: BigInt(ctx.from.id) },
          });

          await ctx.reply(`üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.username}! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.`);

          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          await showModeratorMenu(ctx);
        } else {
          await ctx.reply('–ù–µ–≤–µ—Ä–Ω–∞—è –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞.');
        }
      } else {
        await ctx.reply('üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤!');
      }
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  } else {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
async function showModeratorMenu(ctx: Context) {
  const keyboard = new InlineKeyboard()
    .text('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', 'message_user')  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    .row()
    .text('–°–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É', 'message_assistant')  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    .row()
    .text('–¢–µ–∫—É—â–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∏', 'current_arbitrations'); // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π

  await ctx.reply('–ú–µ–Ω—é', { reply_markup: keyboard });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.callbackQuery('message_user', async (ctx) => {
  await ctx.answerCallbackQuery();  // –£–±–∏—Ä–∞–µ–º "–∑–∞–≤–∏—Å–∞–Ω–∏–µ" –∫–Ω–æ–ø–∫–∏
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
});

bot.callbackQuery('message_assistant', async (ctx) => {
  await ctx.answerCallbackQuery();  // –£–±–∏—Ä–∞–µ–º "–∑–∞–≤–∏—Å–∞–Ω–∏–µ" –∫–Ω–æ–ø–∫–∏
  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.');
});

bot.callbackQuery('current_arbitrations', async (ctx) => {
  await ctx.answerCallbackQuery();  // –£–±–∏—Ä–∞–µ–º "–∑–∞–≤–∏—Å–∞–Ω–∏–µ" –∫–Ω–æ–ø–∫–∏
  await ctx.reply('–°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π.');
});

// Webhook –¥–ª—è Next.js
export const POST = webhookCallback(bot, 'std/http');
