import { Bot, webhookCallback, Context } from 'grammy';
import { PrismaClient, ArbitrationStatus } from '@prisma/client';


const token = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_SUPPORT_BOT_TOKEN not found.');

const bot = new Bot(token);
const prisma = new PrismaClient();

interface MessageData {
  chat_id: string;
  text: string;
  reply_markup?: {
    inline_keyboard: Array<Array<{
      text: string;
      callback_data: string;
    }>>;
  };
}

type TelegramButton = {
  text: string;
  callback_data: string;
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async function sendTelegramMessageWithButtons(chatId: string, text: string, buttons: TelegramButton[]) {
  const botToken = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
      reply_markup: {
        inline_keyboard: buttons.map((button) => [{ text: button.text, callback_data: button.callback_data }]),
      },
    }),
  });
}


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendTelegramMessageToUser(chatId: string, text: string) {
  const botToken = process.env.TELEGRAM_USER_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_USER_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }

    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: ${chatId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
  }
}

async function sendTelegramMessageToModerator(chatId: string, text: string, arbitrationId?: bigint) {
  const botToken = process.env.TELEGRAM_ADMIN_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_ADMIN_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    const messageData: MessageData = {
      chat_id: chatId,
      text,
    };

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω arbitrationId, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å"
    if (arbitrationId) {
      messageData.reply_markup = {
        inline_keyboard: [
          [
            {
              text: '–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å',
              callback_data: `review_${arbitrationId.toString()}`,
            },
          ],
        ],
      };
    }

    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(messageData),
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: ${response.statusText}`);
    }

    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —Å ID: ${chatId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É:', error);
  }
}




type TranslationKey = keyof typeof translations["en"];

const getTranslation = (lang: "en" | "ru", key: TranslationKey) => {
  return translations[lang][key] || translations["en"][key];
};

const translations = {
  en: {
    end_dialog_error: "Error: could not get your Telegram ID.",
    no_active_requests: "‚ö†Ô∏è You have no active requests.",
    dialog_closed: "The dialog with the user has been closed.",
    assistant_finished_dialog: "The assistant has finished the dialog.",
    start_invalid_link: "‚ùå The link is invalid or has already been used.",
    assistant_congrats: "üéâ Congratulations, you are now an assistant!",
    start_message: "üëã This is the support bot! Use a valid invite link to access the functionality.",
    menu_message: "üìã Main menu:",
    start_work: "üöÄ Start working!",
    my_coins: "üí∞ My coins",
    my_activity: "üìä My activity",
    already_working: "‚ö†Ô∏è You are already working!",
    work_started: "üöÄ Work started! To end, use the /end_work command.",
    end_work: "üö™ Work finished!",
    no_working_status: "‚ö†Ô∏è You are not working at the moment!",
    accept_request: "‚úÖ You have accepted the request. Please wait for the user's question.",
    reject_request: "‚ùå You have rejected the request.",
    send_message_error: "Please send a text message.",
    no_user_requests: "‚ö†Ô∏è You have no active user requests.",
    error_processing_message: "An error occurred while processing your message. Please try again later.",
  },
  ru: {
    end_dialog_error: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.",
    no_active_requests: "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
    dialog_closed: "–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω.",
    assistant_finished_dialog: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.",
    start_invalid_link: "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.",
    assistant_congrats: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å—Ç–∞–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!",
    start_message: "üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.",
    menu_message: "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    start_work: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
    my_coins: "üí∞ –ú–æ–∏ –∫–æ–∏–Ω—ã",
    my_activity: "üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    already_working: "‚ö†Ô∏è –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!",
    work_started: "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞! –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end_work.",
    end_work: "üö™ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
    no_working_status: "‚ö†Ô∏è –í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!",
    accept_request: "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    reject_request: "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.",
    send_message_error: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    no_user_requests: "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
    error_processing_message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
  },
};

const detectUserLanguage = (ctx: Context) => {
  const userLang = ctx.from?.language_code;
  return userLang === 'ru' ? 'ru' : 'en';
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ —à—Ç—Ä–∞—Ñ–Ω—ã—Ö –æ—á–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
async function getAssistantPenaltyPoints(assistantId: bigint) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);

  const actions = await prisma.requestAction.findMany({
    where: {
      assistantId: assistantId,
      createdAt: {
        gte: yesterday, // –î–µ–π—Å—Ç–≤–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
      },
    },
  });

  let penaltyPoints = 0;
  for (const action of actions) {
    if (action.action === 'REJECTED') {
      penaltyPoints += 1; // 1 –æ—á–∫–æ –∑–∞ –æ—Ç–∫–∞–∑
    } else if (action.action === 'IGNORED') {
      penaltyPoints += 3; // 3 –æ—á–∫–∞ –∑–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
  }

  return penaltyPoints;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async function findNewAssistant(requestId: bigint, ignoredAssistants: bigint[]) {
  // –ò—â–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
  const availableAssistants = await prisma.assistant.findMany({
    where: {
      isWorking: true,
      isBusy: false,
      telegramId: {
        notIn: ignoredAssistants, // –∏—Å–∫–ª—é—á–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
      },
    },
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏ –∫–∞–∂–¥–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
  const assistantsWithPenalty = await Promise.all(
    availableAssistants.map(async (assistant) => {
      const penaltyPoints = await getAssistantPenaltyPoints(assistant.telegramId);
      return { ...assistant, penaltyPoints };
    })
  );

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –ø–æ —à—Ç—Ä–∞—Ñ–Ω—ã–º –æ—á–∫–∞–º –∏ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  assistantsWithPenalty.sort((a, b) => {
    if (a.penaltyPoints === b.penaltyPoints) {
      // –ï—Å–ª–∏ —à—Ç—Ä–∞—Ñ–Ω—ã–µ –æ—á–∫–∏ —Ä–∞–≤–Ω—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      return (b.lastActiveAt?.getTime() || 0) - (a.lastActiveAt?.getTime() || 0);
    }
    return a.penaltyPoints - b.penaltyPoints; // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —à—Ç—Ä–∞—Ñ–Ω—ã–º –æ—á–∫–∞–º (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
  });

  // –í—ã–±–∏—Ä–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º–∏ —à—Ç—Ä–∞—Ñ–Ω—ã–º–∏ –æ—á–∫–∞–º–∏
  const selectedAssistant = assistantsWithPenalty[0];

  // –ï—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
  if (!selectedAssistant) {
    await prisma.assistantRequest.update({
      where: { id: requestId },
      data: { ignoredAssistants: [] }, // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
    });
    return findNewAssistant(requestId, []);
  }

  return selectedAssistant;
}


async function endActiveDialog(telegramId: bigint, lang: "en" | "ru", ctx: Context) {
  try {
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    const activeRequest = await prisma.assistantRequest.findFirst({
      where: {
        assistant: { telegramId: telegramId }, // telegramId –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        isActive: true,
      },
      include: { user: true },
    });

    if (!activeRequest) {
      await ctx.reply(getTranslation(lang, 'no_active_requests'));
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
    await prisma.assistantRequest.update({
      where: { id: activeRequest.id },
      data: { status: 'COMPLETED', isActive: false },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistant.update({
      where: { telegramId: telegramId }, // telegramId –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      data: { isBusy: false },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ "COMPLETED"
    await prisma.conversation.updateMany({
      where: {
        userId: activeRequest.userId,
        assistantId: telegramId,
        status: 'IN_PROGRESS', // –¢–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
      },
      data: {
        status: 'COMPLETED',
        updatedAt: new Date(), // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      },
    });

    await ctx.reply(getTranslation(lang, 'dialog_closed'));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await sendTelegramMessageToUser(activeRequest.user.telegramId.toString(), getTranslation(lang, 'assistant_finished_dialog'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞:', error);
    await ctx.reply(getTranslation(lang, 'end_dialog_error'));
  }
}


// –ö–æ–º–∞–Ω–¥–∞ end_dialog
bot.command('end_dialog', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    await endActiveDialog(telegramId, lang, ctx);
  } catch (error) {
    console.error('Error ending dialog:', error);
    await ctx.reply(getTranslation(lang, 'end_dialog_error'));
  }
});


// –ö–æ–º–∞–Ω–¥–∞ end_work
bot.command('end_work', async (ctx) => {
  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const lang = detectUserLanguage(ctx);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –µ—Å—Ç—å
    await endActiveDialog(telegramId, lang, ctx);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: telegramId },
    });
    if (!assistant?.isWorking) {
      await ctx.reply(getTranslation(lang, 'no_working_status'));
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistant.update({
      where: { telegramId: telegramId },
      data: { isWorking: false, isBusy: false },
    });

    await ctx.reply(getTranslation(lang, 'end_work'));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_dialog_error'));
  }
});


bot.command('start', async (ctx) => {
  const lang = detectUserLanguage(ctx);
  const args = ctx.match?.split(' ') ?? [];

  if (args.length > 0 && args[0].startsWith('invite_')) {
    const inviteToken = args[0].replace('invite_', '');

    try {
      const invitation = await prisma.invitation.findUnique({ where: { token: inviteToken } });

      if (!invitation || invitation.used) {
        await ctx.reply(getTranslation(lang, 'start_invalid_link'));
        return;
      }

      if (ctx.from?.id) {
        const telegramId = BigInt(ctx.from.id);

        await prisma.assistant.create({
          data: {
            telegramId: telegramId,
            role: invitation.role,
          },
        });

        await prisma.invitation.update({
          where: { id: invitation.id },
          data: { used: true },
        });

        await ctx.reply(getTranslation(lang, 'assistant_congrats'));

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await prisma.assistant.update({
          where: { telegramId: telegramId },
          data: { lastActiveAt: new Date() },
        });
      } else {
        await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      }
    } catch (error) {
      console.error('Error assigning assistant role:', error);
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
    }
  } else {
    await ctx.reply(getTranslation(lang, 'start_message'));
  }
});

bot.command('menu', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ctx.from —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: telegramId },
    });

    if (!assistant) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistant.update({
      where: { telegramId: telegramId },
      data: { lastActiveAt: new Date() },
    });

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ–Ω—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
    await ctx.reply(getTranslation(lang, 'menu_message'), {
      reply_markup: {
        inline_keyboard: [
          [{ text: getTranslation(lang, 'start_work'), callback_data: 'start_work' }],
          [{ text: getTranslation(lang, 'my_coins'), callback_data: 'my_coins' }],
          [{ text: getTranslation(lang, 'my_activity'), callback_data: 'my_activity' }],
        ],
      },
    });
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    console.error('Error showing menu:', errorMessage);
  }
});

bot.on('callback_query:data', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  if (ctx.from?.id) {
    const telegramId = BigInt(ctx.from.id); // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ id –≤ BigInt
    const data = ctx.callbackQuery?.data;

    if (data.startsWith('accept_') || data.startsWith('reject_')) {
      const [action, requestId] = data.split('_');

      if (action === 'accept') {
        await handleAcceptRequest(requestId, telegramId, ctx);
      } else if (action === 'reject') {
        await handleRejectRequest(requestId, telegramId, ctx);
      }

      return; // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å
    }

    if (data === 'start_work') {
      const assistant = await prisma.assistant.findUnique({ where: { telegramId: telegramId } });

      if (assistant?.isWorking) {
        await ctx.reply(getTranslation(lang, 'already_working'));
        return;
      }

      await prisma.assistant.update({
        where: { telegramId: telegramId },
        data: { isWorking: true, isBusy: false },
      });

      await ctx.reply(getTranslation(lang, 'work_started'));
      return;
    } else if (data === 'my_coins') {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const assistant = await prisma.assistant.findUnique({
        where: { telegramId: telegramId },
      });

      if (assistant) {
        const coinsMessage = `${getTranslation(lang, 'my_coins')}: ${assistant.coins}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
        await ctx.reply(coinsMessage, {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—ã–≤–æ–¥', callback_data: 'request_withdrawal' }],
            ],
          },
        });
      } else {
        await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      }
    } else if (data === 'my_activity') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      const stats = await getAssistantActivity(telegramId);

      const activityMessage = `
        üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
        - –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${stats.totalConversations}
        - –î–∏–∞–ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: ${stats.conversationsLast24Hours}
        - –ü—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: ${stats.ignoredRequests}
        - –û—Ç–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: ${stats.rejectedRequests}
        - –ñ–∞–ª–æ–± –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏: ${stats.complaintsLast24Hours}
      `;

      await ctx.reply(activityMessage);
    } else if (data === 'request_withdrawal') {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥
      const assistant = await prisma.assistant.findUnique({
        where: { telegramId: telegramId },
      });

      if (assistant) {
        const withdrawalAmount = assistant.coins; // –°—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

        try {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ WithdrawalRequest —á–µ—Ä–µ–∑ Prisma
          await prisma.withdrawalRequest.create({
            data: {
              userId: assistant.telegramId, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BigInt –≤ —Å—Ç—Ä–æ–∫—É
              userNickname: ctx.from?.username || null,
              amount: withdrawalAmount,
              status: '–¢—Ä–µ–±—É–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
            },
          });

          // –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
          await ctx.reply('–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.');
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
      } else {
        await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      }
    }
  } else {
    await ctx.reply(getTranslation(lang, 'end_dialog_error'));
  }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
async function getAssistantActivity(assistantId: bigint) {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);

  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
  const totalConversations = await prisma.conversation.count({
    where: { assistantId: assistantId },
  });

  // –î–∏–∞–ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
  const conversationsLast24Hours = await prisma.conversation.count({
    where: {
      assistantId: assistantId,
      createdAt: {
        gte: yesterday,
      },
    },
  });

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (IGNORED) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
  const ignoredRequests = await prisma.requestAction.count({
    where: {
      assistantId: assistantId,
      action: 'IGNORED',
      createdAt: {
        gte: yesterday,
      },
    },
  });

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–∞–∑–æ–≤ (REJECTED) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
  const rejectedRequests = await prisma.requestAction.count({
    where: {
      assistantId: assistantId,
      action: 'REJECTED',
      createdAt: {
        gte: yesterday,
      },
    },
  });

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∞–ª–æ–± –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
  const complaintsLast24Hours = await prisma.complaint.count({
    where: {
      assistantId: assistantId,
      createdAt: {
        gte: yesterday,
      },
    },
  });

  return {
    totalConversations,
    conversationsLast24Hours,
    ignoredRequests,
    rejectedRequests,
    complaintsLast24Hours,
  };
}


// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleAcceptRequest(requestId: string, assistantTelegramId: bigint, ctx: Context) {
  try {
    const assistantRequest = await prisma.assistantRequest.update({
      where: { id: BigInt(requestId) },
      data: { status: 'IN_PROGRESS', isActive: true },
      include: { user: true },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    await prisma.assistant.update({
      where: { telegramId: assistantTelegramId },
      data: { isBusy: true },
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ Conversation
    await prisma.conversation.create({
      data: {
        userId: assistantRequest.userId, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assistantId: assistantTelegramId, // ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        messages: [], // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        status: 'IN_PROGRESS', // –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      },
    });

    await ctx.reply('‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

    await sendTelegramMessageToUser(
      assistantRequest.user.telegramId.toString(),
      '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.'
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
async function handleRejectRequest(requestId: string, assistantTelegramId: bigint, ctx: Context) {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    const assistantRequest = await prisma.assistantRequest.findUnique({
      where: { id: BigInt(requestId) },
    });

    const ignoredAssistants = assistantRequest?.ignoredAssistants || [];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    ignoredAssistants.push(assistantTelegramId);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–∫–∞–∑–∞ –≤ —Ç–∞–±–ª–∏—Ü—É RequestAction
    await prisma.requestAction.create({
      data: {
        requestId: BigInt(requestId),
        assistantId: assistantTelegramId,
        action: 'REJECTED',
      },
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ" –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
    await prisma.assistantRequest.update({
      where: { id: BigInt(requestId) },
      data: {
        status: 'REJECTED',
        isActive: false,
        ignoredAssistants, // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
      },
    });

    // –ò—â–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const newAssistant = await findNewAssistant(BigInt(requestId), ignoredAssistants);

    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –µ–º—É
    if (newAssistant) {
      await prisma.assistantRequest.update({
        where: { id: BigInt(requestId) },
        data: {
          assistantId: newAssistant.telegramId, // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
          status: 'PENDING',
        },
      });

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      await sendTelegramMessageWithButtons(
        newAssistant.telegramId.toString(),
        `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
        [
          { text: '–ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_${requestId}` },
          { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${requestId}` },
        ]
      );

      await ctx.reply('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å. –ù–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω.');
    } else {
      await ctx.reply('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, —á—Ç–æ –æ–Ω –Ω–µ –∑–∞–Ω—è—Ç
    await prisma.assistant.update({
      where: { telegramId: assistantTelegramId },
      data: { isBusy: false },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.');
  }
}
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /problem
bot.command('problem', async (ctx) => {
  try {
    if (!ctx.from?.id) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId: telegramId },
    });

    if (!assistant) {
      await ctx.reply('–û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const activeRequest = await prisma.assistantRequest.findFirst({
      where: {
        assistant: { telegramId: telegramId },
        isActive: true,
      },
      include: { user: true },
    });

    if (!activeRequest) {
      await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    const existingArbitration = await prisma.arbitration.findFirst({
      where: {
        assistantId: telegramId,
        userId: activeRequest.userId,
        status: 'IN_PROGRESS' as ArbitrationStatus,
      },
    });

    if (existingArbitration) {
      await ctx.reply('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ –ø–æ —ç—Ç–æ–º—É –∑–∞–ø—Ä–æ—Å—É.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const userNickname = activeRequest.user.username || null;
    const assistantNickname = ctx.from.username || null;

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–∏–∫–Ω–µ–π–º–æ–≤
    const arbitration = await prisma.arbitration.create({
      data: {
        userId: activeRequest.userId,
        userNickname, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assistantId: telegramId,
        assistantNickname, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        moderatorId: null,
        reason: '–û—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º',
        status: 'PENDING' as ArbitrationStatus,
      },
    });

    await ctx.reply('–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.');
    await sendTelegramMessageToUser(
      activeRequest.user.telegramId.toString(),
      '–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.'
    );

    // –ò—â–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
    const lastActiveModerator = await prisma.moderator.findFirst({
      orderBy: {
        lastActiveAt: 'desc', // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      },
    });

    if (!lastActiveModerator) {
      await ctx.reply('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.');
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    await sendTelegramMessageToModerator(
      lastActiveModerator.id.toString(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramId –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
      '–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä–±–∏—Ç—Ä–∞–∂.',
      arbitration.id // –ü–µ—Ä–µ–¥–∞–µ–º ID –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    );
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await ctx.reply(`‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞: ${errorMessage}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
  }
});



// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
bot.on('message', async (ctx) => {
  try {
    const lang = detectUserLanguage(ctx);

    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const assistantTelegramId = BigInt(ctx.from.id);
    const assistantMessage = ctx.message?.text;

    if (!assistantMessage) {
      await ctx.reply(getTranslation(lang, 'send_message_error'));
      return;
    }

    // –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    const [activeRequest, arbitration] = await Promise.all([
      prisma.assistantRequest.findFirst({
        where: {
          assistant: { telegramId: assistantTelegramId },
          isActive: true,
        },
        include: { user: true },
      }),
      prisma.arbitration.findFirst({
        where: {
          assistantId: assistantTelegramId,
          status: 'IN_PROGRESS' as ArbitrationStatus,
        },
        include: {
          user: true,
          moderator: true,
        },
      }),
    ]);

    if (arbitration) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
      const messageToSend = `–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:\n${assistantMessage}`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendTelegramMessageToUser(
        arbitration.user.telegramId.toString(),
        messageToSend
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –æ–Ω –Ω–∞–∑–Ω–∞—á–µ–Ω
      if (arbitration.moderator) {
        await sendTelegramMessageToModerator(
          arbitration.moderator.id.toString(),
          messageToSend
        );
      }
    } else if (activeRequest) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await sendTelegramMessageToUser(
        activeRequest.user.telegramId.toString(),
        assistantMessage
      );
    } else {
      // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π
      await ctx.reply(getTranslation(lang, 'no_user_requests'));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
    await ctx.reply(getTranslation(detectUserLanguage(ctx), 'error_processing_message'));
  }
});

export const POST = webhookCallback(bot, 'std/http');
