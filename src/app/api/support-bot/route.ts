import { Bot, webhookCallback } from 'grammy';
import { PrismaClient } from '@prisma/client';

const token = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_BOT_TOKEN not found.');

const bot = new Bot(token);
const prisma = new PrismaClient();

bot.command('start', async (ctx) => {
  const args = ctx.match?.split(' ') ?? [];
  if (args.length > 0 && args[0].startsWith('invite_')) {
    const inviteToken = args[0].replace('invite_', '');

    try {
      const invitation = await prisma.invitation.findUnique({
        where: { token: inviteToken },
      });

      if (!invitation || invitation.used) {
        await ctx.reply('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.');
        return;
      }


      await prisma.assistant.create({
        data: {
          telegramId: String(ctx.from?.id),
          role: invitation.role,
        },
      });

      await prisma.invitation.update({
        where: { id: invitation.id },
        data: { used: true },
      });

      await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å—Ç–∞–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞!');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } else {
    await ctx.reply('üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.');
  }
});


bot.command('menu', async (ctx) => {
  try {
    await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'start_work' }],
          [{ text: '–ú–æ–∏ –∫–æ–∏–Ω—ã', callback_data: 'my_coins' }],
          [{ text: '–ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'my_activity' }],
        ],
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});


bot.on('callback_query:data', async (ctx) => {
  const data = ctx.callbackQuery?.data;

  if (data === 'start_work') {
    await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏: –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.');
  } else if (data === 'my_coins') {

    await ctx.reply('–í–∞—à–∏ –∫–æ–∏–Ω—ã: 1000.');
  } else if (data === 'my_activity') {
  
    await ctx.reply('–ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 10 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
  }
});

export const POST = webhookCallback(bot, 'std/http');
