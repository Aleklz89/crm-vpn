import { Bot, webhookCallback, Context } from 'grammy';
import { PrismaClient } from '@prisma/client';

const token = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_BOT_TOKEN not found.');

const bot = new Bot(token);
const prisma = new PrismaClient();




// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async function sendTelegramMessageToUser(chatId: string, text: string) {
  const botToken = process.env.TELEGRAM_USER_BOT_TOKEN;
  if (!botToken) {
    console.error('–û—à–∏–±–∫–∞: TELEGRAM_USER_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return;
  }

  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: chatId, text }),
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
    }

    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID: ${chatId}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
  }
}

type TranslationKey = keyof typeof translations["en"];

const getTranslation = (lang: "en" | "ru", key: TranslationKey) => {
  return translations[lang][key] || translations["en"][key];
};

const translations = {
  en: {
    end_dialog_error: "Error: could not get your Telegram ID.",
    no_active_requests: "‚ö†Ô∏è You have no active requests.",
    dialog_closed: "The dialog with the user has been closed.",
    assistant_finished_dialog: "The assistant has finished the dialog.",
    start_invalid_link: "‚ùå The link is invalid or has already been used.",
    assistant_congrats: "üéâ Congratulations, you are now an assistant!",
    start_message: "üëã This is the support bot! Use a valid invite link to access the functionality.",
    menu_message: "üìã Main menu:",
    start_work: "üöÄ Start working!",
    my_coins: "üí∞ My coins",
    my_activity: "üìä My activity",
    already_working: "‚ö†Ô∏è You are already working!",
    work_started: "üöÄ Work started! To end, use the /end_work command.",
    end_work: "üö™ Work finished!",
    no_working_status: "‚ö†Ô∏è You are not working at the moment!",
    accept_request: "‚úÖ You have accepted the request. Please wait for the user's question.",
    reject_request: "‚ùå You have rejected the request.",
    send_message_error: "Please send a text message.",
    no_user_requests: "‚ö†Ô∏è You have no active user requests.",
  },
  ru: {
    end_dialog_error: "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.",
    no_active_requests: "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.",
    dialog_closed: "–î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω.",
    assistant_finished_dialog: "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥.",
    start_invalid_link: "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.",
    assistant_congrats: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å—Ç–∞–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!",
    start_message: "üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.",
    menu_message: "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
    start_work: "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!",
    my_coins: "üí∞ –ú–æ–∏ –∫–æ–∏–Ω—ã",
    my_activity: "üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    already_working: "‚ö†Ô∏è –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!",
    work_started: "üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞! –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end_work.",
    end_work: "üö™ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
    no_working_status: "‚ö†Ô∏è –í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!",
    accept_request: "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    reject_request: "‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.",
    send_message_error: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
    no_user_requests: "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
  },
};

const detectUserLanguage = (ctx: Context) => {
  const userLang = ctx.from?.language_code;
  return userLang === 'ru' ? 'ru' : 'en';
};

bot.command('end_dialog', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    if (!ctx.from?.id) {
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      return;
    }

    const telegramId = BigInt(ctx.from.id);

    const activeRequest = await prisma.assistantRequest.findFirst({
      where: {
        assistant: { telegramId },
        isActive: true,
      },
      include: { user: true },
    });

    if (!activeRequest) {
      await ctx.reply(getTranslation(lang, 'no_active_requests'));
      return;
    }

    await prisma.assistantRequest.update({
      where: { id: activeRequest.id },
      data: { status: 'COMPLETED', isActive: false },
    });

    await prisma.assistant.update({
      where: { telegramId },
      data: { isBusy: false },
    });

    await ctx.reply(getTranslation(lang, 'dialog_closed'));

    await sendTelegramMessageToUser(activeRequest.user.telegramId.toString(), getTranslation(lang, 'assistant_finished_dialog'));
  } catch (error) {
    console.error('Error ending dialog:', error);
    await ctx.reply(getTranslation(lang, 'end_dialog_error'));
  }
});

bot.command('start', async (ctx) => {
  const lang = detectUserLanguage(ctx);
  const args = ctx.match?.split(' ') ?? [];

  if (args.length > 0 && args[0].startsWith('invite_')) {
    const inviteToken = args[0].replace('invite_', '');

    try {
      const invitation = await prisma.invitation.findUnique({ where: { token: inviteToken } });

      if (!invitation || invitation.used) {
        await ctx.reply(getTranslation(lang, 'start_invalid_link'));
        return;
      }

      if (ctx.from?.id) {
        const telegramId = BigInt(ctx.from.id);

        await prisma.assistant.create({
          data: {
            telegramId,
            role: invitation.role,
          },
        });

        await prisma.invitation.update({
          where: { id: invitation.id },
          data: { used: true },
        });

        await ctx.reply(getTranslation(lang, 'assistant_congrats'));
      } else {
        await ctx.reply(getTranslation(lang, 'end_dialog_error'));
      }
    } catch (error) {
      console.error('Error assigning assistant role:', error);
      await ctx.reply(getTranslation(lang, 'end_dialog_error'));
    }
  } else {
    await ctx.reply(getTranslation(lang, 'start_message'));
  }
});

bot.command('menu', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  try {
    await ctx.reply(getTranslation(lang, 'menu_message'), {
      reply_markup: {
        inline_keyboard: [
          [{ text: getTranslation(lang, 'start_work'), callback_data: 'start_work' }],
          [{ text: getTranslation(lang, 'my_coins'), callback_data: 'my_coins' }],
          [{ text: getTranslation(lang, 'my_activity'), callback_data: 'my_activity' }],
        ],
      },
    });
  } catch (error) {
    console.error('Error displaying menu:', error);
    await ctx.reply(getTranslation(lang, 'end_dialog_error'));
  }
});

bot.on('callback_query:data', async (ctx) => {
  const lang = detectUserLanguage(ctx);

  if (ctx.from?.id) {
    const telegramId = BigInt(ctx.from.id);
    const data = ctx.callbackQuery?.data;

    if (data === 'start_work') {
      const assistant = await prisma.assistant.findUnique({ where: { telegramId } });

      if (assistant?.isWorking) {
        await ctx.reply(getTranslation(lang, 'already_working'));
        return;
      }

      await prisma.assistant.update({
        where: { telegramId },
        data: { isWorking: true, isBusy: false },
      });

      await ctx.reply(getTranslation(lang, 'work_started'));
    } else if (data === 'my_coins') {
      await ctx.reply(getTranslation(lang, 'my_coins'));
    } else if (data === 'my_activity') {
      await ctx.reply('üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 10 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
    } else if (data.startsWith('accept_') || data.startsWith('reject_')) {
      const [action, requestId] = data.split('_');
      if (action === 'accept') {
        await handleAcceptRequest(requestId, telegramId, ctx);
      } else if (action === 'reject') {
        await handleRejectRequest(requestId, telegramId, ctx);
      }
      await ctx.reply(getTranslation(lang, 'my_activity'));
    }
  } else {
    await ctx.reply(getTranslation(lang, 'end_dialog_error'));
  }
});

bot.command('end_work', async (ctx) => {
  try {
    if (ctx.from?.id) {
      const telegramId = BigInt(ctx.from.id);
      const assistant = await prisma.assistant.findUnique({
        where: { telegramId },
      });
      if (!assistant?.isWorking) {
        await ctx.reply(getTranslation(detectUserLanguage(ctx), 'no_working_status'));
        return;
      }
      await prisma.assistant.update({
        where: { telegramId },
        data: { isWorking: false, isBusy: false },
      });
      await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_work'));
    } else {
      await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_dialog_error'));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    await ctx.reply(getTranslation(detectUserLanguage(ctx), 'end_dialog_error'));
  }
});

bot.command('problem', async (ctx) => {
  try {
    if (!ctx.from?.id) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const assistant = await prisma.assistant.findUnique({
      where: { telegramId },
    });

    if (!assistant) {
      await ctx.reply('–û—à–∏–±–∫–∞: –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const activeRequest = await prisma.assistantRequest.findFirst({
      where: {
        assistant: { telegramId },
        isActive: true,
      },
      include: { user: true },
    });

    if (!activeRequest) {
      await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.');
      return;
    }


    await prisma.arbitration.create({
      data: {
        userId: activeRequest.userId,
        assistantId: telegramId,
        moderatorId: null,
        reason: '–û—Ç–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º',
        status: 'PENDING',
      },
    });

    

    await ctx.reply('–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.');
    await sendTelegramMessageToUser(
      activeRequest.user.telegramId.toString(),
      '–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.'
    );

   
    const moderators = await prisma.moderator.findMany({
      where: {
        telegramId: {
          not: null,
        },
      },
    });


    for (const moderator of moderators) {
      if (moderator.telegramId) {
        await sendTelegramMessageToUser(
          moderator.telegramId.toString(),
          '–î–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä–±–∏—Ç—Ä–∞–∂.'
        );
      }
    }
  } catch (error) {

    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

bot.on('message', async (ctx) => {
  try {

    if (ctx.message?.text?.startsWith('/')) {
      return;
    }

    if (!ctx.from?.id) {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
      return;
    }

    const telegramId = BigInt(ctx.from.id);
    const activeRequest = await prisma.assistantRequest.findFirst({
      where: {
        assistant: { telegramId },
        isActive: true,
      },
      include: { user: true },
    });

    if (!activeRequest) {
      await ctx.reply(getTranslation(detectUserLanguage(ctx), 'no_active_requests'));
      return;
    }

    const assistantMessage = ctx.message?.text;
    if (!assistantMessage) {
      await ctx.reply(getTranslation(detectUserLanguage(ctx), 'send_message_error'));
      return;
    }

    await sendTelegramMessageToUser(activeRequest.user.telegramId.toString(), assistantMessage);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

async function handleAcceptRequest(requestId: string, assistantTelegramId: bigint, ctx: Context) {
  const assistantRequest = await prisma.assistantRequest.update({
    where: { id: BigInt(requestId) },
    data: { status: 'IN_PROGRESS', isActive: true },
    include: { user: true },
  });
  await prisma.assistant.update({
    where: { telegramId: assistantTelegramId },
    data: { isBusy: true },
  });
  await ctx.reply('‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–ø–æ—Ä–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /problem');
  await sendTelegramMessageToUser(assistantRequest.user.telegramId.toString(), '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.');
}

async function handleRejectRequest(requestId: string, assistantTelegramId: bigint, ctx: Context) {
  await prisma.assistantRequest.update({
    where: { id: BigInt(requestId) },
    data: { status: 'REJECTED', isActive: false },
  });
  await prisma.assistant.update({
    where: { telegramId: assistantTelegramId },
    data: { isBusy: false },
  });
  await ctx.reply('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.');
}



export const POST = webhookCallback(bot, 'std/http');
