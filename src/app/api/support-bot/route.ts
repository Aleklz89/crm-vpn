import { Bot, webhookCallback, Context } from 'grammy';
import { PrismaClient } from '@prisma/client';

const token = process.env.TELEGRAM_SUPPORT_BOT_TOKEN;
if (!token) throw new Error('TELEGRAM_BOT_TOKEN not found.');

const bot = new Bot(token);
const prisma = new PrismaClient();

bot.command('start', async (ctx) => {
  const args = ctx.match?.split(' ') ?? [];
  if (args.length > 0 && args[0].startsWith('invite_')) {
    const inviteToken = args[0].replace('invite_', '');

    try {
      const invitation = await prisma.invitation.findUnique({
        where: { token: inviteToken },
      });

      if (!invitation || invitation.used) {
        await ctx.reply('‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞.');
        return;
      }

      if (ctx.from?.id) {
        const telegramId = BigInt(ctx.from.id); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegramId –≤ bigint

        await prisma.assistant.create({
          data: {
            id: telegramId, // telegramId –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ id –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            telegramId: telegramId, // id –∏ telegramId —Å–æ–≤–ø–∞–¥–∞—é—Ç
            role: invitation.role,
          },
        });

        await prisma.invitation.update({
          where: { id: invitation.id },
          data: { used: true },
        });

        await ctx.reply('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å—Ç–∞–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞!');
      } else {
        await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
      await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } else {
    await ctx.reply('üëã –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.');
  }
});

bot.command('menu', async (ctx) => {
  try {
    await ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'start_work' }],
          [{ text: 'üí∞ –ú–æ–∏ –∫–æ–∏–Ω—ã', callback_data: 'my_coins' }],
          [{ text: 'üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', callback_data: 'my_activity' }],
        ],
      },
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

bot.on('callback_query:data', async (ctx) => {
  if (ctx.from?.id) {
    const telegramId = BigInt(ctx.from.id); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegramId –≤ bigint

    const data = ctx.callbackQuery?.data;

    if (data === 'start_work') {
      const assistant = await prisma.assistant.findUnique({
        where: { id: telegramId }, // –ò—â–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ id (–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–≤–µ–Ω telegramId)
      });

      if (assistant?.isWorking) {
        await ctx.reply('‚ö†Ô∏è –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!');
        return;
      }

      await prisma.assistant.update({
        where: { id: telegramId }, // –ò—â–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ id
        data: { isWorking: true, isBusy: false },
      });

      await ctx.reply('üöÄ –†–∞–±–æ—Ç–∞ –Ω–∞—á–∞—Ç–∞! –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /end_work.');
    } else if (data === 'my_coins') {
      await ctx.reply('üí∞ –í–∞—à–∏ –∫–æ–∏–Ω—ã: 1000.');
    } else if (data === 'my_activity') {
      await ctx.reply('üìä –ú–æ—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 10 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.');
    } else if (data.startsWith('accept_') || data.startsWith('reject_')) {
      const [action, requestId] = data.split('_');

      if (action === 'accept') {
        await handleAcceptRequest(requestId, telegramId, ctx);
      } else if (action === 'reject') {
        await handleRejectRequest(requestId, telegramId, ctx);
      }
    }
  } else {
    await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
  }
});

async function handleAcceptRequest(requestId: string, assistantTelegramId: bigint, ctx: Context) {
  const assistantRequest = await prisma.assistantRequest.update({
    where: { id: BigInt(requestId) }, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º requestId –≤ bigint
    data: { status: 'IN_PROGRESS', isActive: true },
    include: { user: true },
  });

  await prisma.assistant.update({
    where: { id: assistantTelegramId }, // –ò—â–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ id
    data: { isBusy: true },
  });

  await ctx.reply('‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ—Ç —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.');
  await sendTelegramMessageToUser(assistantRequest.user.telegramId.toString(), '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.');
}

async function handleRejectRequest(requestId: string, assistantTelegramId: bigint, ctx: Context) {
  await prisma.assistantRequest.update({
    where: { id: BigInt(requestId) }, // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º requestId –≤ bigint
    data: { status: 'REJECTED', isActive: false },
  });

  await prisma.assistant.update({
    where: { id: assistantTelegramId }, // –ò—â–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ id
    data: { isBusy: false },
  });

  await ctx.reply('‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.');
}

bot.command('end_work', async (ctx) => {
  try {
    if (ctx.from?.id) {
      const telegramId = BigInt(ctx.from.id); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º telegramId –≤ bigint

      const assistant = await prisma.assistant.findUnique({
        where: { id: telegramId }, // –ò—â–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ id
      });

      if (!assistant?.isWorking) {
        await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!');
        return;
      }

      await prisma.assistant.update({
        where: { id: telegramId }, // –ò—â–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ id
        data: { isWorking: false, isBusy: false },
      });

      await ctx.reply('üö™ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    } else {
      await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Telegram.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', error);
    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

async function sendTelegramMessageToUser(chatId: string, text: string) {
  const botToken = process.env.TELEGRAM_USER_BOT_TOKEN;
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

  await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text,
    }),
  });
}

export const POST = webhookCallback(bot, 'std/http');
