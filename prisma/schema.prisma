generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invitation {
  id         Int      @id @default(autoincrement())
  link       String   @unique
  token      String   @unique
  role       String
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
  expiresAt  DateTime?
  updatedAt  DateTime @updatedAt
}

model Assistant {
  id         Int      @id @default(autoincrement()) 
  telegramId BigInt   @unique
  role       String   @default("assistant")
  isWorking  Boolean  @default(false)
  isBusy     Boolean  @default(false)
  startedAt  DateTime?
  joinedAt   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  requests   AssistantRequest[]
}

enum SubscriptionType {
  FREE
  FIRST
  SECOND
  THIRD
  FOURTH
}

model User {
  id                     Int               @id @default(autoincrement())
  telegramId             BigInt            @unique
  username               String?
  referralCount          Int               @default(0)
  subscriptionType       SubscriptionType  @default(FREE)
  hasUpdatedSubscription Boolean           @default(false)
  totalRequests          Int               @default(0)
  aiRequests             Int               @default(0)
  assistantRequests      Int               @default(0)
  isActiveAIChat         Boolean           @default(false)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  conversations          Conversation[]
  requests               AssistantRequest[]
}

model Conversation {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  messages    Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AssistantRequest {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  assistantId Int
  message     String
  status      RequestStatus @default(PENDING)
  isActive    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
}

enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}
