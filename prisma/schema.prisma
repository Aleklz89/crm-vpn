generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Admin {
  id        BigInt   @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Moderator {
  id           BigInt        @id @unique @default(autoincrement()) // Основной ID, используется как Telegram ID
  login        String        @unique
  password     String
  inviteToken  String?       @unique // Поле приглашения необязательное
  role         String        @default("moderator") // Роль по умолчанию "модератор"
  lastActiveAt DateTime      @default(now()) // Время последней активности
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  arbitrations Arbitration[] // Поле для обратного отношения
}

model Invitation {
  id        BigInt   @id @default(autoincrement()) // Поле id генерируется автоматически
  link      String   @unique
  token     String   @unique
  role      String
  used      Boolean  @default(false)
  login     String? // Логин для модераторов (необязательное поле)
  password  String? // Пароль для модераторов (необязательное поле)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assistant {
  telegramId      BigInt             @id @unique
  role            String             @default("assistant")
  isWorking       Boolean            @default(false)
  isBusy          Boolean            @default(false)
  startedAt       DateTime?
  joinedAt        DateTime           @default(now())
  coins           Int                @default(0) // Field for storing coins
  lastActiveAt    DateTime?          // Field for storing last active time
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  requests        AssistantRequest[]
  arbitrations    Arbitration[]      // Field for the reverse relation
  conversations   Conversation[]     // Reverse relation to Conversation
}


enum SubscriptionType {
  FREE
  FIRST
  SECOND
  THIRD
  FOURTH
}

model User {
  telegramId             BigInt             @id @unique
  username               String?
  referralCount          Int                @default(0)
  referrer               Referral[]         @relation("Referrer") // Обратное отношение к `Referral`
  referredUsers          Referral[]         @relation("Referred") // Обратное отношение для приглашенных
  subscriptionType       SubscriptionType   @default(FREE)
  hasUpdatedSubscription Boolean            @default(false)
  totalRequests          Int                @default(0)
  aiRequests             Int                @default(0)
  assistantRequests      Int                @default(0)
  coins                  Int                @default(0) // Добавлено поле для хранения коинов
  isActiveAIChat         Boolean            @default(false)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  conversations          Conversation[]
  requests               AssistantRequest[]
  arbitrations           Arbitration[]      // Поле для обратного отношения
}

model Referral {
  id             BigInt   @id @default(autoincrement())
  
  // Отношение к пользователю, который создал реферальную ссылку
  user           User     @relation("Referrer", fields: [userId], references: [telegramId]) 
  userId         BigInt

  // Отношение к пользователю, который использовал реферальную ссылку
  referredUser   User?    @relation("Referred", fields: [referredUserId], references: [telegramId]) 
  referredUserId BigInt?  @unique

  code           String   @unique
  link           String
  createdAt      DateTime @default(now())
}

model Conversation {
  id          BigInt   @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [telegramId])
  userId      BigInt
  assistant   Assistant @relation(fields: [assistantId], references: [telegramId]) // Relation to the Assistant model
  assistantId BigInt    // Field to store the assistant's ID
  messages    Json      @default("[]") // Store messages in JSON format
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      String    @default("IN_PROGRESS") // Field to track the conversation status
}


model AssistantRequest {
  id          BigInt        @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [telegramId])
  userId      BigInt
  assistant   Assistant?     @relation(fields: [assistantId], references: [telegramId])
  assistantId BigInt?        // Поле assistantId теперь может быть null
  message     String
  status      RequestStatus @default(PENDING)
  isActive    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ignoredAssistants BigInt[]
}


enum RequestStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  REJECTED
}

model Arbitration {
  id               BigInt            @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [telegramId])
  userId           BigInt
  userNickname     String?           // Добавлено поле для хранения никнейма пользователя
  assistant        Assistant         @relation(fields: [assistantId], references: [telegramId])
  assistantId      BigInt
  assistantNickname String?          // Добавлено поле для хранения никнейма ассистента
  moderator        Moderator?        @relation(fields: [moderatorId], references: [id])
  moderatorId      BigInt?           // Поле может быть null
  reason           String
  assignedAt    DateTime?  // Дата и время назначения модератора
  ignoredModerators BigInt[]         @default([])  // Поле для хранения списка ID проигнорировавших модераторов
  decision         String?
  status           ArbitrationStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

enum ArbitrationStatus {
  PENDING // Арбитраж создан, ожидает решения
  IN_PROGRESS // Арбитраж в процессе рассмотрения
  ACCEPTED // Решение в пользу ассистента
  REJECTED // Решение в пользу пользователя
  CANCELLED // Арбитраж отменен
}

model WithdrawalRequest {
  id           BigInt   @id @default(autoincrement())
  userId       BigInt
  userNickname String?
  userRole     String   @default("user") // Add a default value
  amount       Float
  status       String   @default("Требует рассмотрения")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Tariff {
  id          BigInt   @id @default(autoincrement())
  name        String
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Complaint {
  id            BigInt   @id @default(autoincrement())
  userId        BigInt   // ID пользователя
  assistantId   BigInt   // ID ассистента
  text          String   // Текст жалобы
  status        String   @default("PENDING") // Статус жалобы (PENDING/REVIEWED)
  decision      String?  // Решение (если рассмотрено)
  createdAt     DateTime @default(now()) // Дата создания
  updatedAt     DateTime @updatedAt      // Дата обновления
}
